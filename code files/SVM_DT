{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "FinalCode_IR_Project_Murali.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "mjv3tM4Fiwyq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "from nltk.stem import PorterStemmer \n",
        "ps = PorterStemmer()\n",
        "from tqdm import tqdm\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.metrics import recall_score\n",
        "from sklearn.metrics import f1_score\n",
        "\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iHTEo6HZfS-z",
        "colab_type": "code",
        "outputId": "5eb92b9f-f4cb-4157-8733-e2135c78d066",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 122
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n",
            "\n",
            "Enter your authorization code:\n",
            "··········\n",
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f-z6LmC8i0DJ",
        "colab_type": "code",
        "outputId": "e3b3d17b-70d8-4a14-d093-63ff95a24668",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "import nltk\n",
        "nltk.download('stopwords')\n",
        "from nltk.corpus import stopwords\n",
        "stop_words = set(stopwords.words('english'))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V5HxSRlJi0N4",
        "colab_type": "code",
        "outputId": "a1bf0b3b-8ce6-4e3d-f101-5553361b1b9e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "data_path = '/content/drive/My Drive/IR Project/facts_opinions.csv'\n",
        "\n",
        "data = pd.read_csv(data_path)\n",
        "data.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Text</th>\n",
              "      <th>Label</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>One of the other reviewers has mentioned that ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>I thought this was a wonderful way to spend ti...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Basically there's a family where a little boy ...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                                Text  Label\n",
              "0  One of the other reviewers has mentioned that ...      0\n",
              "1  A wonderful little production. <br /><br />The...      0\n",
              "2  I thought this was a wonderful way to spend ti...      0\n",
              "3  Basically there's a family where a little boy ...      0\n",
              "4  Petter Mattei's \"Love in the Time of Money\" is...      0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 137
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NLdqeMhEi0Rg",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "total_data = pd.concat([opinions, facts], axis = 0).reset_index(drop=True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "62HP7NQbi0Xj",
        "colab_type": "code",
        "outputId": "85b3afad-524e-47de-ade3-eceb3e192c4f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "label ={0 : 'Opinion', 1 : 'Facts'}\n",
        "label"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{0: 'Opinion', 1: 'Facts'}"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 139
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mgH0Mtb5i0gH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def preprocess(text):\n",
        "\n",
        "    symbols = list(',.!@#$%^&*()')\n",
        "    mod_words = []\n",
        "    words = text.split()\n",
        "    for word in words :\n",
        "        word = word.lower()\n",
        "        for sym in symbols:\n",
        "            if sym in word:\n",
        "                word = word.replace(sym, '')\n",
        "        if word not in stop_words and word.isalpha() :\n",
        "            word = ps.stem(word)\n",
        "            if len(word) > 2:\n",
        "                mod_words.append(word)\n",
        "\n",
        "    text = ' '.join(mod_words)\n",
        "    return text"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-uhX7ObNi0j2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "total_data['Text'] = total_data['Text'].apply(preprocess) # pre processing of data\n",
        "total_data = total_data.sample(frac=1).reset_index(drop=True) #shuffling the data"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UVCYcbwC4Ev7",
        "colab_type": "text"
      },
      "source": [
        "## Decision Tree"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3jthDnzdqmIR",
        "colab_type": "text"
      },
      "source": [
        "Splitting the Data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mrs-0auQoq4S",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Xtrain, Xtest, ytrain, ytest = train_test_split(total_data['Text'], total_data['Label'], test_size=0.3, random_state=42)\n",
        "\n",
        "Xtrain, Xval, ytrain, yval = train_test_split(Xtrain, ytrain, test_size = 0.2, random_state = 40)\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bRDxeAo0xzO_",
        "colab_type": "text"
      },
      "source": [
        "BOW Embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ddPUoLWEoq8w",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "vec = CountVectorizer(analyzer='word',max_features = 50,stop_words = 'english')\n",
        "Xtrain_bow= vec.fit_transform(Xtrain)\n",
        "Xtrain_bow = Xtrain_bow.toarray()\n",
        "\n",
        "Xval_bow = vec.transform(Xval).toarray()\n",
        "\n",
        "Xtest_bow = vec.transform(Xtest)\n",
        "Xtest_bow = Xtest_bow.toarray()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZIfFpS8L1QZ_",
        "colab_type": "text"
      },
      "source": [
        "### Decision Tree Implementation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wciww-X9oqzR",
        "colab_type": "code",
        "outputId": "db1f74d3-6411-48db-989b-fa7119faec9a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "max_depth = [1,2,3,4,5,6,7,8]\n",
        "accuracy = []\n",
        "f_scores = []\n",
        "precisions = []\n",
        "recall = []\n",
        "for k in max_depth:\n",
        "\n",
        "    classifier = DecisionTreeClassifier(max_depth=k)\n",
        "    classifier.fit(Xtrain_bow, ytrain)\n",
        "    ypred = classifier.predict(Xval_bow) # validation data\n",
        "    acc = accuracy_score(yval, ypred)\n",
        "    f_score = f1_score(yval, ypred, average='macro')\n",
        "    prec = precision_score(yval, ypred, average='macro')\n",
        "    rec = recall_score(yval, ypred, average='macro')\n",
        "    accuracy.append(acc)\n",
        "    f_scores.append(f_score)\n",
        "    precisions.append(prec)\n",
        "    recall.append(rec)\n",
        "\n",
        "    print(f'Max Depth : {k} Accuracy : {acc} Precision : {prec} Recall : {rec} F score : {f_score}')\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Max Depth : 1 Accuracy : 0.795 Precision : 0.8338340763713898 Recall : 0.79524345968053 F score : 0.7889518554955772\n",
            "Max Depth : 2 Accuracy : 0.8792857142857143 Precision : 0.8831890331890332 Recall : 0.8793579170569736 F score : 0.8789917754300114\n",
            "Max Depth : 3 Accuracy : 0.8885714285714286 Precision : 0.8890932311621966 Recall : 0.8885977318321058 F score : 0.8885386725894957\n",
            "Max Depth : 4 Accuracy : 0.8985714285714286 Precision : 0.8986586483601053 Recall : 0.8985610174714642 F score : 0.8985639761288584\n",
            "Max Depth : 5 Accuracy : 0.8978571428571429 Precision : 0.8979281486017554 Recall : 0.8978477507096954 F score : 0.8978508367098172\n",
            "Max Depth : 6 Accuracy : 0.8957142857142857 Precision : 0.8976125873925089 Recall : 0.8956650931940677 F score : 0.895581098339719\n",
            "Max Depth : 7 Accuracy : 0.9085714285714286 Precision : 0.9092077805551525 Recall : 0.9085998134690071 F score : 0.9085398841641301\n",
            "Max Depth : 8 Accuracy : 0.9064285714285715 Precision : 0.9127462681618884 Recall : 0.9065171561574615 F score : 0.906082369960697\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SSNSLT5Soqtn",
        "colab_type": "code",
        "outputId": "b7c0e8fd-573e-4539-beed-c088848f3392",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "plt.plot(accuracy,label = 'Accuracy')\n",
        "plt.plot(f_scores,label = 'F-score')\n",
        "plt.plot(precisions,label = 'Precision')\n",
        "plt.plot(recall,label = 'Recall')\n",
        "y_pos = np.arange(len(max_depth))\n",
        "plt.xticks(y_pos,max_depth)\n",
        "plt.xlabel('Max Depth Value')\n",
        "plt.legend()\n",
        "plt.title('Decision Tree on Validation Data (BOW Approach)')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zrn34gC03ExC",
        "colab_type": "text"
      },
      "source": [
        "Best Decision Tree for BOW : Max_depth = 7\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Sk7ra5LTi0bs",
        "colab_type": "code",
        "outputId": "39debdad-523f-4243-d169-2e002ff65230",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "#Best Max_Depth is 7\n",
        "\n",
        "best_dt_clf = DecisionTreeClassifier(max_depth=7)\n",
        "best_dt_clf.fit(Xtrain_bow, ytrain)\n",
        "\n",
        "ypred = best_dt_clf.predict(Xtest_bow) # Predicting Test data\n",
        "\n",
        "acc = accuracy_score(ytest, ypred)\n",
        "f_score = f1_score(ytest, ypred, average='macro')\n",
        "prec = precision_score(ytest, ypred, average='macro')\n",
        "rec = recall_score(ytest, ypred, average='macro')\n",
        "\n",
        "\n",
        "print(f'Max Depth : {6} Accuracy : {acc} Precision : {prec} Recall : {rec} F score : {f_score}')\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Max Depth : 6 Accuracy : 0.9046666666666666 Precision : 0.906208598496128 Recall : 0.9050529942978456 F score : 0.9046232596523929\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4oqSHiFR3a_B",
        "colab_type": "text"
      },
      "source": [
        "TFIDF Word Embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TtJKhdOI3RXj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "vectorizer = TfidfVectorizer(min_df = 0.01,max_features = 50)\n",
        "\n",
        "Xtrain_tfidf = vectorizer.fit_transform(Xtrain).todense()\n",
        "Xval_tfidf = vectorizer.transform(Xval).todense()\n",
        "Xtest_tfidf = vectorizer.transform(Xtest).todense()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CP2fVRy_3Ryj",
        "colab_type": "code",
        "outputId": "cf7e3dcd-d147-49ac-9335-e77e2067b19a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "\n",
        "max_depth = [1,2,3,4,5,6,7,8,9]\n",
        "accuracy_tfidf = []\n",
        "f_scores_tfidf = []\n",
        "precisions_tfidf = []\n",
        "recall_tfidf = []\n",
        "for k in max_depth:\n",
        "\n",
        "    classifier = DecisionTreeClassifier(max_depth=k)\n",
        "    classifier.fit(Xtrain_tfidf, ytrain)\n",
        "    ypred = classifier.predict(Xval_tfidf) # validation data\n",
        "    acc = accuracy_score(yval, ypred)\n",
        "    f_score = f1_score(yval, ypred, average='macro')\n",
        "    prec = precision_score(yval, ypred, average='macro')\n",
        "    rec = recall_score(yval, ypred, average='macro')\n",
        "    \n",
        "    accuracy_tfidf.append(acc)\n",
        "    f_scores_tfidf.append(f_score)\n",
        "    precisions_tfidf.append(prec)\n",
        "    recall_tfidf.append(rec)\n",
        "\n",
        "    print(f'K : {k} Accuracy : {acc} Precision : {prec} Recall : {rec} F score : {f_score}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "K : 1 Accuracy : 0.795 Precision : 0.8338340763713898 Recall : 0.79524345968053 F score : 0.7889518554955772\n",
            "K : 2 Accuracy : 0.8707142857142857 Precision : 0.8714579038644024 Recall : 0.8706823891477329 F score : 0.8706424130550086\n",
            "K : 3 Accuracy : 0.8814285714285715 Precision : 0.8848862332676294 Recall : 0.8813609823693518 F score : 0.881148178150903\n",
            "K : 4 Accuracy : 0.8714285714285714 Precision : 0.875587769848 Recall : 0.8715038193955498 F score : 0.8710876113148245\n",
            "K : 5 Accuracy : 0.8935714285714286 Precision : 0.8953255281993261 Recall : 0.8936191706513686 F score : 0.8934613567588963\n",
            "K : 6 Accuracy : 0.9071428571428571 Precision : 0.9097284254838545 Recall : 0.9071998106118584 F score : 0.9070045026171589\n",
            "K : 7 Accuracy : 0.91 Precision : 0.911063372717508 Recall : 0.9100365510950023 F score : 0.9099468870415408\n",
            "K : 8 Accuracy : 0.9142857142857143 Precision : 0.9151315130286133 Recall : 0.9143181924861071 F score : 0.9142463376040018\n",
            "K : 9 Accuracy : 0.9128571428571428 Precision : 0.9130128554542281 Recall : 0.9128712507576546 F score : 0.9128507400543713\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ma8LBHIY3RsC",
        "colab_type": "code",
        "outputId": "75785997-f387-4330-a013-75958af16ee5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "\n",
        "plt.plot(accuracy_tfidf,label = 'Accuracy')\n",
        "plt.plot(f_scores_tfidf,label = 'F-scores')\n",
        "plt.plot(precisions_tfidf,label = 'Precisions')\n",
        "plt.plot(recall_tfidf,label = 'Recall')\n",
        "y_pos = np.arange(len(max_depth))\n",
        "plt.xticks(y_pos,max_depth)\n",
        "plt.xlabel('Max Depth Value')\n",
        "plt.legend()\n",
        "plt.title('Decision Tree on Validation Data (TFIDF Approach)')\n",
        "# plt.savefig('bow_Accuracy.png')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KxHLkndc6fxl",
        "colab_type": "text"
      },
      "source": [
        "Best Decision Tree for TFIDF : Max_depth = 8"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tljnIvP93Rjh",
        "colab_type": "code",
        "outputId": "6d8ff334-112d-4020-c2f7-02be4c3b2c84",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "best_knn_tfidf = DecisionTreeClassifier(max_depth=8)\n",
        "best_knn_tfidf.fit(Xtrain_tfidf, ytrain)\n",
        "\n",
        "ypred = best_knn_tfidf.predict(Xtest_tfidf) # Predicting Test data\n",
        "\n",
        "acc = accuracy_score(ytest, ypred)\n",
        "f_score = f1_score(ytest, ypred, average='macro')\n",
        "prec = precision_score(ytest, ypred, average='macro')\n",
        "rec = recall_score(ytest, ypred, average='macro')\n",
        "\n",
        "\n",
        "print(f'K : {8} Accuracy : {acc} Precision : {prec} Recall : {rec} F score : {f_score}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "K : 8 Accuracy : 0.9176666666666666 Precision : 0.9192130920430643 Recall : 0.9180508659913694 F score : 0.917630341647333\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nhNPuB5z8VWm",
        "colab_type": "text"
      },
      "source": [
        "## SVM "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d4afOgUg6BQd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Xtrain, Xtest, ytrain, ytest"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "u6yQWcg86BN1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from sklearn import svm\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3m-3sTKb6lrZ",
        "colab_type": "text"
      },
      "source": [
        "Train Test Split"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4EvDUKfqJlUZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Xtrain_svm, Xtest_svm, ytrain_svm, ytest_svm = train_test_split(total_data['Text'], total_data['Label'], test_size=0.3, random_state=42)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Vzz5LN_AJlfz",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-F2Mj59gNUAI",
        "colab_type": "text"
      },
      "source": [
        "BOW Embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0aLXmF4lKDZL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "vec = CountVectorizer(analyzer='word',max_features = 50,stop_words = 'english')\n",
        "\n",
        "Xtrain_svm_bow= vec.fit_transform(Xtrain_svm)\n",
        "Xtrain_svm_bow = Xtrain_svm_bow.toarray()\n",
        "\n",
        "Xtest_svm_bow = vec.transform(Xtest_svm)\n",
        "Xtest_svm_bow = Xtest_svm_bow.toarray()\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xUu5clYA7bs9",
        "colab_type": "code",
        "outputId": "9c5973f5-d697-4332-9170-03dec9240d6e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "parameters = {'kernel':('linear', 'rbf'), 'C':[0.0001,0.001,0.01,1,10]}\n",
        "model = svm.SVC()\n",
        "clf_bow = GridSearchCV(model, parameters, scoring='accuracy',cv=10)\n",
        "clf_bow.fit(Xtrain_svm_bow, ytrain_svm)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=10, error_score=nan,\n",
              "             estimator=SVC(C=1.0, break_ties=False, cache_size=200,\n",
              "                           class_weight=None, coef0=0.0,\n",
              "                           decision_function_shape='ovr', degree=3,\n",
              "                           gamma='scale', kernel='rbf', max_iter=-1,\n",
              "                           probability=False, random_state=None, shrinking=True,\n",
              "                           tol=0.001, verbose=False),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'C': [0.0001, 0.001, 0.01, 1, 10],\n",
              "                         'kernel': ('linear', 'rbf')},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring='accuracy', verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 146
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ao111808_GMZ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Graph Plotting\n",
        "\n",
        "list_score = list(clf_bow.cv_results_['mean_test_score'])\n",
        "list_kernel = list(np.array(clf_bow.cv_results_['param_kernel']))\n",
        "list_C = list(clf_bow.cv_results_['param_C'])\n",
        "\n",
        "list_c = list(set(list_C))\n",
        "list_c.sort()\n",
        "\n",
        "list_kernel_linear = []\n",
        "list_kernel_rbf = []\n",
        "\n",
        "index = 0\n",
        "for item in list_kernel:\n",
        "  if item == 'linear':\n",
        "    score = list_score[index]\n",
        "    list_kernel_linear.append(score)\n",
        "  else:\n",
        "    score = list_score[index]\n",
        "    list_kernel_rbf.append(score)\n",
        "  index += 1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GrUCSFJ6_Gba",
        "colab_type": "code",
        "outputId": "1c659ce7-5ada-49a7-d26f-4c43c5214728",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "plt.plot(list_kernel_linear,label = 'Linear Kernel')\n",
        "plt.plot(list_kernel_rbf,label = 'RBF Kernel')\n",
        "\n",
        "y_pos = np.arange(len(list_c))\n",
        "cval = [\"0.0001\",\"0.001\",\"0.01\",\"1\",\"10\"]\n",
        "plt.xticks(y_pos,cval)\n",
        "\n",
        "plt.xlabel('Value of C')\n",
        "plt.legend()\n",
        "plt.title('Score VS Parameter C (BOW Approach)')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Bl-giLvq7b55",
        "colab_type": "code",
        "outputId": "262a994c-cca7-43ca-9106-025a7c372e39",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "print(\" The Accuracy of the best model is : \",clf_bow.best_score_)\n",
        "print(\" Best Parameters : \",clf_bow.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " The Accuracy of the best model is :  0.9485714285714286\n",
            " Best Parameters :  {'C': 1, 'kernel': 'rbf'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C2oLopgyUNRN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "classifier_best = clf_bow.best_estimator_\n",
        "classifier_best.fit(Xtrain_svm_bow, ytrain_svm)\n",
        "Y_pred = classifier_best.predict(Xtest_svm_bow)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MRTOQXIV7cCu",
        "colab_type": "code",
        "outputId": "2b387bd3-457a-41a4-cc27-0b82d2df5804",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "acc = accuracy_score(ytest_svm, Y_pred)\n",
        "f_score = f1_score(ytest_svm, Y_pred, average='macro')\n",
        "prec = precision_score(ytest_svm, Y_pred, average='macro')\n",
        "rec = recall_score(ytest_svm, Y_pred, average='macro')\n",
        "\n",
        "print(f' Accuracy : {acc} Precision : {prec} Recall : {rec} F score : {f_score}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " Accuracy : 0.957 Precision : 0.9576505088839055 Recall : 0.9566090415359902 F score : 0.9569322352648428\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eQDa6WO37b-_",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CHmaK8wh7b3d",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jjJArvfTCTE-",
        "colab_type": "text"
      },
      "source": [
        "### TFIDF Embedding"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Acig982U6BFO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uw5kzCC_6BBk",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "vectorizer = TfidfVectorizer(min_df = 0.01,max_features = 50)\n",
        "\n",
        "Xtrain_svm_tfidf = vectorizer.fit_transform(Xtrain_svm).todense()\n",
        "Xtest_svm_tfidf = vectorizer.transform(Xtest_svm).todense()\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "klZGdL5a-wFy",
        "colab_type": "code",
        "outputId": "48820aa1-1435-40b5-999a-0741b96ff7c9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "parameters = {'kernel':('linear', 'rbf'), 'C':[0.0001,0.001,0.01,1,10]}\n",
        "model = svm.SVC()\n",
        "clf = GridSearchCV(model, parameters, scoring='accuracy',cv=10)\n",
        "clf.fit(Xtrain_svm_tfidf, ytrain_svm)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=10, error_score=nan,\n",
              "             estimator=SVC(C=1.0, break_ties=False, cache_size=200,\n",
              "                           class_weight=None, coef0=0.0,\n",
              "                           decision_function_shape='ovr', degree=3,\n",
              "                           gamma='scale', kernel='rbf', max_iter=-1,\n",
              "                           probability=False, random_state=None, shrinking=True,\n",
              "                           tol=0.001, verbose=False),\n",
              "             iid='deprecated', n_jobs=None,\n",
              "             param_grid={'C': [0.0001, 0.001, 0.01, 1, 10],\n",
              "                         'kernel': ('linear', 'rbf')},\n",
              "             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n",
              "             scoring='accuracy', verbose=0)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 153
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WLTzcpzcaYYf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "## Graph Plotting\n",
        "\n",
        "list_score_tfidf = list(clf.cv_results_['mean_test_score'])\n",
        "list_kernel_tfidf = list(np.array(clf.cv_results_['param_kernel']))\n",
        "list_C_tfidf = list(clf.cv_results_['param_C'])\n",
        "\n",
        "list_c_tfidf = list(set(list_C_tfidf))\n",
        "list_c_tfidf.sort()\n",
        "\n",
        "list_kernel_linear_tfidf = []\n",
        "list_kernel_rbf_tfidf = []\n",
        "\n",
        "index = 0\n",
        "for item in list_kernel_tfidf:\n",
        "  if item == 'linear':\n",
        "    score = list_score_tfidf[index]\n",
        "    list_kernel_linear_tfidf.append(score)\n",
        "  else:\n",
        "    score = list_score_tfidf[index]\n",
        "    list_kernel_rbf_tfidf.append(score)\n",
        "  index += 1"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7B0vCScqaYol",
        "colab_type": "code",
        "outputId": "1a573e62-8791-4e40-97c3-0ff3f1022f60",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "source": [
        "\n",
        "plt.plot(list_kernel_linear_tfidf,label = 'Linear Kernel')\n",
        "plt.plot(list_kernel_rbf_tfidf,label = 'RBF Kernel')\n",
        "\n",
        "y_pos = np.arange(len(list_c))\n",
        "cval = [\"0.0001\",\"0.001\",\"0.01\",\"1\",\"10\"]\n",
        "plt.xticks(y_pos,cval)\n",
        "\n",
        "plt.xlabel('Value of C')\n",
        "plt.legend()\n",
        "plt.title('Score VS Parameter C (TFIDF Approach)')\n",
        "plt.show()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CN1zKnbEaYlc",
        "colab_type": "code",
        "outputId": "5eb55b7a-3da9-430c-d7b8-f9c10eebadf5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "print(\" The Accuracy of the best model is : \",clf.best_score_)\n",
        "print(\" Best Parameters : \",clf.best_params_)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " The Accuracy of the best model is :  0.9481428571428572\n",
            " Best Parameters :  {'C': 1, 'kernel': 'rbf'}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "05TEk9Zt_DlI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "classifier_best = clf.best_estimator_\n",
        "classifier_best.fit(Xtrain_svm_tfidf, ytrain_svm)\n",
        "Y_pred = classifier_best.predict(Xtest_svm_tfidf)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r0y1WAKI_Dwb",
        "colab_type": "code",
        "outputId": "9b2130f4-0830-47cf-bc37-4b696cc978b3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "acc = accuracy_score(ytest_svm, Y_pred)\n",
        "f_score = f1_score(ytest_svm, Y_pred, average='macro')\n",
        "prec = precision_score(ytest_svm, Y_pred, average='macro')\n",
        "rec = recall_score(ytest_svm, Y_pred, average='macro')\n",
        "\n",
        "print(f' Accuracy : {acc} Precision : {prec} Recall : {rec} F score : {f_score}')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " Accuracy : 0.954 Precision : 0.9542525096208812 Recall : 0.9537676624464768 F score : 0.9539488320355951\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cqCbywDt_D8x",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qe2qCdDOaYjT",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "thFfsnClaYgX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CkDyHCeUaYcn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N0lhcXwK3Rf2",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}